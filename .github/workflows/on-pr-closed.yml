# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

name: on-pr-closed
on:
  pull_request:
    types:
      - closed
    branches:
      - main
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  deploy-env:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      deploy-env: ${{ steps.get-env.outputs.deploy-env }}
    steps:
      - name: extract compliant deploy environment name
        id: get-env
        run: echo "deploy-env=$(echo ${{ github.event.pull_request.head.ref }} | cut -c -16 | sed -e 's/-*$//' -e 's/[\/_\.]/-/g')$(echo -n ${{ github.event.pull_request.head.ref }} | md5sum | cut -c -4)" >> $GITHUB_OUTPUT
  build:
    needs: deploy-env
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: ls
        run: ls -la
      - name: Get PR type
        id: get-pr-type
        if: github.event.pull_request.merged == true
        run: echo "type=$(echo '${{ github.event.pull_request.title }}' | sed -E 's/^(feat|fix|chore).*\:.*/\1/')" >> $GITHUB_OUTPUT
      - name: Get current package version
        id: get-current-package-version
        if: github.event.pull_request.merged == true
        run: echo "current-version-number=$(cat .projenrc.py | grep -E 'version="[0-9]+\.[0-9]+\.[0-9]+"' | awk -F 'version=' '{print $2}' | awk -F '"' '{print $2}')" >> $GITHUB_OUTPUT
      - name: "Calculate new package version "
        id: calculate-new-package-version
        if: github.event.pull_request.merged == true
        run: |-
          MAJOR_VERSION=$(echo ${{ steps.get-current-package-version.outputs.current-version-number }} | grep -E '[0-9]+\.[0-9]+\.[0-9]+' | awk -F '.' '{print $1}')
          MINOR_VERSION=$(echo ${{ steps.get-current-package-version.outputs.current-version-number }} | grep -E '[0-9]+\.[0-9]+\.[0-9]+' | awk -F '.' '{print $2}')
          PATCH_VERSION=$(echo ${{ steps.get-current-package-version.outputs.current-version-number }} | grep -E '[0-9]+\.[0-9]+\.[0-9]+' | awk -F '.' '{print $3}')
          if ${{contains(github.event.pull_request.title, '!:')}}; then NEW_VERSION_NUMBER=$((MAJOR_VERSION+1)).0.0
          elif ${{ steps.get-pr-type.outputs.type == 'feat' }}; then NEW_VERSION_NUMBER=$MAJOR_VERSION.$((MINOR_VERSION+1)).0
          elif ${{ steps.get-pr-type.outputs.type == 'fix' || steps.get-pr-type.outputs.type == 'chore' }}; then NEW_VERSION_NUMBER=$MAJOR_VERSION.$MINOR_VERSION.$((PATCH_VERSION+1))
          fi
          echo "new-version-number=$NEW_VERSION_NUMBER" >> $GITHUB_OUTPUT
      - name: Write new package version to .projenrc
        if: github.event.pull_request.merged == true
        run: sed -E -i 's/version="[0-9]+\.[0-9]+\.[0-9]+"/version="${{ steps.calculate-new-package-version.outputs.new-version-number }}"/' .projenrc.py
      # - run: npx projen
      - name: echo app id
        run: echo ${{ env.AUTOCOMMIT_APP_ID }}
      - name: echo key id
        run: echo ${{ secrets.AUTOCOMMIT_APP_PRIVATE_KEY }}
      - name: Get token for gh app Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ env.AUTOCOMMIT_APP_ID }}
          application_private_key: ${{ secrets.AUTOCOMMIT_APP_PRIVATE_KEY }}

      - name: Commit automatic version bump
        if: github.event.pull_request.merged == true
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}
        run: |-
          git config user.name 'autocommit app'
          git config user.email 'autocommit-app@placeholder.com'
          git add .
          git commit -m "chore: update version number (automated)"
          git push
      - run: echo "SIMULATING PROJEN BUILD"
      # - uses: actions/checkout@v3
      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.11"
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 18.17.1
      # - id: poetry-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.local
      #     key: poetry-1.6.1-0
      # - uses: snok/install-poetry@v1
      #   with:
      #     version: 1.6.1
      #     virtualenvs-create: true
      #     virtualenvs-in-project: true
      # - name: AWS login with DEV credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.ROOFTOP_SOLAR_DEV_AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.ROOFTOP_SOLAR_DEV_AWS_SECRET_KEY }}
      #     aws-region: us-east-1
      # - run: |-
      #     aws codeartifact login --tool pip --domain energysage --domain-owner 659694780082 --repository cloud-engineering
      #     aws codeartifact login --tool npm --domain energysage --domain-owner 659694780082 --repository cloud-engineering
      #     poetry config http-basic.codeartifact aws $(aws codeartifact get-authorization-token --domain energysage --domain-owner 659694780082 --query authorizationToken --output text)
      # - id: cache-deps
      #   uses: actions/cache@v3
      #   with:
      #     path: |-
      #       .venv
      #       .mypy_cache
      #     key: pydeps-${{ hashFiles('**/poetry.lock') }}
      # - run: poetry install --no-interaction --no-root
      # - run: npx projen
      # - run: npx projen build
      # - env:
      #     DEPLOY_ENV: ${{ needs.deploy-env.outputs.deploy-env }}
      #   run: npx cdk synth
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: cdk synth
      #     path: cdk.out
  teardown-pr-env:
    needs:
      - build
      - deploy-env
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: ${{ needs.deploy-env.outputs.deploy-env }}
    steps:
      - run: echo "SIMULATING DESTROY OF PR ENV"
      # - uses: actions/checkout@v3
      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.11"
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 18.17.1
      # - id: poetry-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.local
      #     key: poetry-1.6.1-0
      # - uses: snok/install-poetry@v1
      #   with:
      #     version: 1.6.1
      #     virtualenvs-create: true
      #     virtualenvs-in-project: true
      # - name: AWS login with DEV credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.ROOFTOP_SOLAR_DEV_AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.ROOFTOP_SOLAR_DEV_AWS_SECRET_KEY }}
      #     aws-region: us-east-1
      # - run: |-
      #     aws codeartifact login --tool pip --domain energysage --domain-owner 659694780082 --repository cloud-engineering
      #     aws codeartifact login --tool npm --domain energysage --domain-owner 659694780082 --repository cloud-engineering
      #     poetry config http-basic.codeartifact aws $(aws codeartifact get-authorization-token --domain energysage --domain-owner 659694780082 --query authorizationToken --output text)
      # - run: poetry install --no-interaction --no-root
      # - run: npx projen
      # - uses: actions/download-artifact@v3
      #   with:
      #     name: cdk synth
      #     path: cdk.out
      # - run: npx cdk destroy -f "${{ needs.deploy-env.outputs.deploy-env }}/*" -a cdk.out
  deploy-int:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: int
    if: github.event.pull_request.merged == true
    steps:
      - run: echo "SIMULATING INT DEPLOY"
      # - uses: actions/checkout@v3
      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.11"
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 18.17.1
      # - id: poetry-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.local
      #     key: poetry-1.6.1-0
      # - uses: snok/install-poetry@v1
      #   with:
      #     version: 1.6.1
      #     virtualenvs-create: true
      #     virtualenvs-in-project: true
      # - name: AWS login with DEV credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.ROOFTOP_SOLAR_DEV_AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.ROOFTOP_SOLAR_DEV_AWS_SECRET_KEY }}
      #     aws-region: us-east-1
      # - run: |-
      #     aws codeartifact login --tool pip --domain energysage --domain-owner 659694780082 --repository cloud-engineering
      #     aws codeartifact login --tool npm --domain energysage --domain-owner 659694780082 --repository cloud-engineering
      #     poetry config http-basic.codeartifact aws $(aws codeartifact get-authorization-token --domain energysage --domain-owner 659694780082 --query authorizationToken --output text)
      # - run: poetry install --no-interaction --no-root
      # - run: npx projen
      # - uses: actions/download-artifact@v3
      #   with:
      #     name: cdk synth
      #     path: cdk.out
      # - run: npx cdk deploy "int/*" --require-approval never -a cdk.out --outputs-file cdk-outputs.json
  run-system-tests-int:
    needs: deploy-int
    permissions:
      contents: read
    uses: ./.github/workflows/run-system-tests.yml
    with:
      sys_test_env: int
    secrets: inherit
  deploy-prod:
    needs:
      - build
      - run-system-tests-int
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: prod
    if: github.event.pull_request.merged == true
    steps:
      - run: echo "SIMULATING PROD DEPLOY"
      # - uses: actions/checkout@v3
      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.11"
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 18.17.1
      # - id: poetry-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.local
      #     key: poetry-1.6.1-0
      # - uses: snok/install-poetry@v1
      #   with:
      #     version: 1.6.1
      #     virtualenvs-create: true
      #     virtualenvs-in-project: true
      # - name: AWS login with PROD credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.ROOFTOP_SOLAR_PROD_AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.ROOFTOP_SOLAR_PROD_AWS_SECRET_KEY }}
      #     aws-region: us-east-1
      # - run: |-
      #     aws codeartifact login --tool pip --domain energysage --domain-owner 659694780082 --repository cloud-engineering
      #     aws codeartifact login --tool npm --domain energysage --domain-owner 659694780082 --repository cloud-engineering
      #     poetry config http-basic.codeartifact aws $(aws codeartifact get-authorization-token --domain energysage --domain-owner 659694780082 --query authorizationToken --output text)
      # - run: poetry install --no-interaction --no-root
      # - run: npx projen
      # - uses: actions/download-artifact@v3
      #   with:
      #     name: cdk synth
      #     path: cdk.out
      # - run: npx cdk deploy "prod/*" --require-approval never -a cdk.out --outputs-file cdk-outputs.json
  run-system-tests-prod:
    needs: deploy-prod
    permissions:
      contents: read
    uses: ./.github/workflows/run-system-tests.yml
    with:
      sys_test_env: prod
    secrets: inherit
